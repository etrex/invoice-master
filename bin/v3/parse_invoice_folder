#!/usr/bin/env ruby

require 'bundler/setup'
require 'optparse'
require 'fileutils'
require 'parallel'
$LOAD_PATH.unshift(File.expand_path('../../lib', __dir__))
require 'invoice_master'
require 'invoice_master/llm_client_v3'

options = {
  debug: true,
  extensions: %w[jpg jpeg png heic],
  workers: 4
}

# 解析命令列參數
OptionParser.new do |opts|
  opts.banner = "Usage: #{$PROGRAM_NAME} [options] <folder_path>"

  opts.on("-d", "--debug", "Enable debug mode") do |d|
    options[:debug] = d
  end

  opts.on("-e", "--extensions x,y,z", Array, "Image extensions to process (default: jpg,jpeg,png,heic)") do |exts|
    options[:extensions] = exts
  end

  opts.on("-w", "--workers N", Integer, "Number of parallel workers (default: 4)") do |w|
    options[:workers] = w
  end

  opts.on("-h", "--help", "Show this help message") do
    puts opts
    exit
  end
end.parse!

if ARGV.empty?
  puts "Error: Please provide a folder path"
  exit 1
end

folder_path = ARGV[0]
unless File.directory?(folder_path)
  puts "Error: '#{folder_path}' is not a directory"
  exit 1
end

# 取得所有符合副檔名的圖檔
image_files = Dir.glob(File.join(folder_path, "**", "*.{#{options[:extensions].join(',')}}"))

if image_files.empty?
  puts "No image files found in '#{folder_path}' with extensions: #{options[:extensions].join(', ')}"
  exit 0
end

puts "Found #{image_files.size} images to process"
puts "Using #{options[:workers]} parallel workers"

success_count = 0
failed_files = []

# 使用 Parallel 進行並行處理
results = Parallel.map(image_files, in_processes: options[:workers]) do |image_path|
  result = { path: image_path }

  begin
    # 檢查對應的 JSON 檔案是否已存在
    json_path = image_path.sub(/\.[^.]+$/, '.json')
    if File.exist?(json_path)
      puts "Skipping: #{image_path} (JSON already exists)"
      result[:status] = :skipped
      result[:message] = "JSON already exists"
      next result
    end

    puts "Processing: #{image_path}"
    
    # 每個 process 建立自己的 parser 實例，使用 V3 client
    parser = InvoiceMaster::Parser.new(
      llm_client: InvoiceMaster::LlmClientV3.new,
      debug: options[:debug]
    )
    
    json_data = parser.parse(image_path)
    output_path = image_path.sub(/\.[^.]+$/, '.json')
    File.write(output_path, JSON.pretty_generate(json_data))
    
    result[:status] = :success
    result[:message] = "Saved to #{output_path}"
  rescue => e
    result[:status] = :failed
    result[:message] = e.message
    result[:backtrace] = e.backtrace if options[:debug]
  end

  result
end

# 處理結果統計
success_count = results.count { |r| r[:status] == :success }
skipped_count = results.count { |r| r[:status] == :skipped }
failed_files = results.select { |r| r[:status] == :failed }

puts "\nSummary:"
puts "Successfully processed: #{success_count} files"
puts "Skipped: #{skipped_count} files"

if failed_files.any?
  puts "\nFailed to process: #{failed_files.size} files"
  puts "\nFailed files:"
  failed_files.each do |result|
    puts "- #{result[:path]}"
    puts "  Error: #{result[:message]}"
    if options[:debug] && result[:backtrace]
      puts "  Backtrace:"
      puts result[:backtrace].map { |line| "    #{line}" }.join("\n")
    end
  end
  exit 1
end
