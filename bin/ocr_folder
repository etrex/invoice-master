#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'
require 'optparse'
require 'pathname'
require 'fileutils'
require 'dotenv'

# 載入環境變數
Dotenv.load

# 常見圖檔副檔名
IMAGE_EXTENSIONS = %w[.jpg .jpeg .png .gif .webp .bmp .tiff .tif]

# 解析命令列參數
options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: ocr_folder [options] DIRECTORY"
  
  opts.on("-h", "--help", "Show this help message") do
    puts opts
    exit
  end
  
  opts.on("-v", "--verbose", "Show verbose output") do
    options[:verbose] = true
  end
  
  opts.on("--max-width WIDTH", Integer, "Maximum width for images (will resize if larger)") do |width|
    options[:max_width] = width
  end
  
  opts.on("--max-height HEIGHT", Integer, "Maximum height for images (will resize if larger)") do |height|
    options[:max_height] = height
  end
  
  opts.on("-q", "--quality QUALITY", Integer, "JPEG quality (1-100, default: 85)") do |quality|
    options[:quality] = quality if quality >= 1 && quality <= 100
  end
  
  opts.on("-o", "--output-dir DIR", "Output directory for OCR text files (default: same as input)") do |dir|
    options[:output_dir] = dir
  end
end.parse!

# 檢查是否提供了資料夾路徑
if ARGV.empty?
  puts "Error: Please provide a directory path"
  exit 1
end

folder_path = ARGV[0]

# 檢查資料夾是否存在
unless File.directory?(folder_path)
  puts "Error: #{folder_path} is not a valid directory"
  exit 1
end

# 設定輸出資料夾
output_dir = options[:output_dir] || folder_path
FileUtils.mkdir_p(output_dir) unless File.directory?(output_dir)

# 取得資料夾中的所有圖檔
def find_images(folder_path)
  images = []
  
  # 使用 Dir.glob 尋找符合條件的檔案（只在當前資料夾層級）
  IMAGE_EXTENSIONS.each do |ext|
    images.concat(Dir.glob(File.join(folder_path, "*#{ext}"), File::FNM_CASEFOLD))
  end
  
  images
end

# 找出所有圖檔
images = find_images(folder_path)

if images.empty?
  puts "No images found in #{folder_path}"
  exit 0
end

puts "Found #{images.length} image(s) to process" if options[:verbose]

# 構建基本的 ocr_file 命令參數
ocr_file_path = File.expand_path("../ocr_file", __FILE__)
ocr_cmd_base = [ocr_file_path]

# 添加通用選項
ocr_cmd_base << "-v" if options[:verbose]
ocr_cmd_base << "--max-width=#{options[:max_width]}" if options[:max_width]
ocr_cmd_base << "--max-height=#{options[:max_height]}" if options[:max_height]
ocr_cmd_base << "--quality=#{options[:quality]}" if options[:quality]

# 處理每一張圖檔
processed_count = 0
failed_count = 0

images.each_with_index do |image_path, index|
  # 計算輸出檔案名稱
  output_basename = "#{File.basename(image_path, '.*')}_ocr.txt"
  output_path = File.join(output_dir, output_basename)
  
  puts "[#{index + 1}/#{images.length}] Processing: #{image_path}" if options[:verbose]
  
  # 構建完整的 ocr_file 命令
  ocr_cmd = ocr_cmd_base.dup
  ocr_cmd << "-o" << output_path
  ocr_cmd << image_path
  
  # 執行 ocr_file 命令
  begin
    system(*ocr_cmd)
    if $?.success?
      processed_count += 1
      puts "  -> OCR result saved to: #{output_path}" if options[:verbose]
    else
      failed_count += 1
      puts "Error processing #{image_path}: ocr_file command failed with exit code #{$?.exitstatus}"
    end
  rescue => e
    failed_count += 1
    puts "Error executing ocr_file for #{image_path}: #{e.message}"
  end
end

puts "OCR processing complete. Successfully processed #{processed_count} image(s), failed: #{failed_count}."
